rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ユーザープロファイル: 自分のプロファイルのみ読み書き可能
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // 新規ユーザー登録時
    }

    // グループごとの連絡先データ
    match /groups/{groupId}/contacts/{contactId} {
      // 読み取り条件:
      // 1. 認証済みであること
      // 2. ユーザーのプロファイルドキュメントが存在すること
      // 3. ユーザーがこの groupId のメンバーであること (users/{userId}.memberOfGroups に groupId が含まれている)
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberOfGroups.hasAny([groupId]);

      // 書き込み (作成、更新、削除) 条件:
      // 読み取り条件と同じ (メンバーであれば書き込みも許可する場合)
      // または、特定の役割 (例: グループ管理者) のみが書き込めるように、より詳細な制御も可能
      allow write: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberOfGroups.hasAny([groupId]);
    }

    // グループメタデータ (オプション)
    match /groups_metadata/{groupId} {
      // 読み取り: グループメンバーなら誰でも読める
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberOfGroups.hasAny([groupId]);
      // 書き込み: グループ管理者のみ許可 (例: `createdBy` フィールドや、別途 `admins` 配列で管理)
      allow write: if request.auth != null &&
                      // (ここにグループ管理者のみが書き込める条件を追加)
                      // 例えば、ドキュメント内の createdBy フィールドが自分のIDと一致する場合など
                      resource.data.createdBy == request.auth.uid;
    }
  }
} 